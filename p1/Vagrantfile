# -*- mode: ruby -*-
# vi: set ft=ruby :

machines=[
  {
    :hostname => "trofidalS",
    :ip => "192.168.56.110",
    :box => "generic/ubuntu2304",
    :ram => 2048,
    :cpu => 2,
    :script => "./scripts/trofidalS.sh"
  },
  {
    :hostname => "trofidalSW",
    :ip => "192.168.56.111",
    :box => "generic/ubuntu2304",
    :ram => 2048,
    :cpu => 2,
    :script => "./scripts/trofidalSW.sh"
  }
]

# All Vagrant configuration is done below. The "2" in Vagrant.configure
# configures the configuration version (we support older styles for
# backwards compatibility). Please don't change it unless you know what
# you're doing.
Vagrant.configure("2") do |config|
  config.vm.box_check_update = false
  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine. In the example below,
  # accessing "localhost:8080" will access port 80 on the guest machine.
  # NOTE: This will enable public access to the opened port
  # config.vm.network "forwarded_port", guest: 80, host: 8080

  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine and only allow access
  # via 127.0.0.1 to disable public access
  # config.vm.network "forwarded_port", guest: 80, host: 8080, host_ip: "127.0.0.1"

  # Create a private network, which allows host-only access to the machine
  # using a specific IP.
  # config.vm.network "private_network", ip: "192.168.33.10"

  # Create a public network, which generally matched to bridged network.
  # Bridged networks make the machine appear as another physical device on
  # your network.
  # config.vm.network "public_network"

  machines.each do |machine|
    config.vm.define machine[:hostname] do |node|
      node.vm.box = machine[:box]
      node.vm.hostname = machine[:hostname]
      node.vm.network "private_network", ip: machine[:ip]
      node.vm.provider "hyperv" do |vb|
        vb.memory = machine[:ram]
        vb.cpus = machine[:cpu]
        vb.vmname = machine[:hostname]
      end
      node.vm.provision "shell", path: machine[:script]
    end
  end
end
